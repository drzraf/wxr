<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xs:schema PUBLIC "-//WordPress//DTD WXR 1.3//EN" "wxr.dtd">
<xs:schema
		xmlns:xs='http://www.w3.org/2001/XMLSchema'
		xmlns:wxr='&WXR_NamespaceURI;'
		xmlns:excerpt='&WXR_NamespaceURI;excerpt/'
		xmlns:content='&RSS_Content_Module_NamespaceURI;'
		xmlns:dc='&Dublin_Core_NamespaceURI;'
		xmlns:wp='&WXR_NamespaceURI;1.2/'
		elementFormDefault='unqualified'
		version='&RSS_Version;'>
	<xs:annotation>
		<xs:documentation>
			This XML Schema 1.1 schema represents the subset of RSS used by the WXR &WXR_Version;. 
		</xs:documentation>
		<xs:documentation source='http://www.rssboard.org/rss-specification' />
		<xs:documentation>
			All of the model groups defined in this schema are <xs:all/> groups, meaning
			that the order of child elements is irrelevant.  Not only does this conform to the RSS
			spec, but it could also simplify the generation of WXR documents.  However, see the
			documentation of the model group in the <channel/> element regarding the implications of
			this for importers that use 'true' streaming parsers.
		</xs:documentation>
	</xs:annotation>

	<xs:import namespace='&Dublin_Core_NamespaceURI;' schemaLocation='dc.xsd' />
	<xs:import namespace='&RSS_Content_Module_NamespaceURI;' schemaLocation='rss_content.xsd' />
	<xs:import namespace='&WXR_NamespaceURI;' schemaLocation='wxr.xsd' />

	<xs:simpleType name='rss_date_time'>
		<xs:annotation>
			<xs:documentation>
				A date-time displayed in RFC-822 format.
			</xs:documentation>
			<xs:documentation>
				Using the regexp definiton of rfc-822 date by Sam Ruby at http://www.intertwingly.net/blog/1360.html
			</xs:documentation>
			<xs:documentation>
				@todo I borrowed this simpleType definition from the generic RSS schema at http://rss2schema.codeplex.com/.
				I haven't verified that the regex is 100% correct, altho it has correctly matched values in the exports I've
				test this schema with (and correctly rejected the few 'handcrafted' badly formatted dates I've tried).
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base='xs:string'>
			<xs:pattern value='(((Mon)|(Tue)|(Wed)|(Thu)|(Fri)|(Sat)|(Sun)), *)?\d\d? +((Jan)|(Feb)|(Mar)|(Apr)|(May)|(Jun)|(Jul)|(Aug)|(Sep)|(Oct)|(Nov)|(Dec)) +\d\d(\d\d)? +\d\d:\d\d(:\d\d)? +(([+\-]?\d\d\d\d)|(UT)|(GMT)|(EST)|(EDT)|(CST)|(CDT)|(MST)|(MDT)|(PST)|(PDT)|\w)' />
		</xs:restriction>
	</xs:simpleType>
	
	<xs:complexType name='rss_open_content'>
		<xs:annotation>
			<xs:documentation>
				This type is used for all elements defined in the RSS spec that are allowed to have
				element children (i.e., that have complexContent).
			</xs:documentation>
		</xs:annotation>
		<xs:openContent>
			<xs:any notNamespace='##local' processContents='lax'>
				<xs:annotation>
					<xs:documentation>
						Follow RSS's rule that elements in any non-empty namespace may appear anywhere
						within an RSS document.
					</xs:documentation>
				</xs:annotation>
			</xs:any>
		</xs:openContent>
		<xs:all>
			<xs:annotation>
				<xs:documentation>
					This empty all model group exists only so that we can extend this type via an all group.
					The need for this is a consequence of the rules for extension in XML Schema 1.1.
				</xs:documentation>
			</xs:annotation>
		</xs:all>
		<xs:anyAttribute notNamespace='##local' processContents='lax'>
			<xs:annotation>
				<xs:documentation>
					Follow RSS's rule that attributes in any non-empty namespace may appear on any
					element defined in the RSS spec.
				</xs:documentation>
			</xs:annotation>
		</xs:anyAttribute>
	</xs:complexType>

	<xs:element name='rss'>
		<xs:annotation>
			<xs:documentation>
				The root of the RSS feed representing a WXR export.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base='rss_open_content'>
					<xs:all>
						<xs:element name='channel'>
							<xs:annotation>
								<xs:documentation>
									The single channel of the RSS feed.
								</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base='rss_open_content'>
										<xs:all>
											<xs:group ref='rss_channel_elements'/>
											<xs:group ref='wxr:channel_elements'/>
											<xs:element name='item' minOccurs='0' maxOccurs='unbounded'>
												<xs:annotation>
													<xs:documentation>
														In one sense this element should be included within the
														'rss_channel_elements' model group (since it is an element defined
														in the RSS spec). It is specified outside that model group to
														conform with the recommendation in the RSS Advisory Board's
														Best Practices profile (http://www.rssboard.org/rss-profile#element-channel),
														which states 'All item elements SHOULD appear after all of the other
														elements in a channel.' Unfortunately, due to limitations in the
														expressivity of XML Schema 1.1, it is not possible to specify
														that constraint in this schema.
													</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:complexContent>
														<xs:extension base='rss_open_content'>
															<xs:all>
																<xs:group ref='rss_item_elements'/>
																<xs:group ref='wxr:post_elements'/>
															</xs:all>
														</xs:extension>
													</xs:complexContent>
												</xs:complexType>
											</xs:element>
										</xs:all>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
							<xs:unique name='term_slug_unique_within_taxonomy'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that terms within a given taxonomy must be unique.
									</xs:documentation>
									<xs:documentation>
										@todo this unique constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<wxr:term/>. However, given the subset of XPath expressions allowed in
										<xs:selector/>I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./wxr:term'/>
								<xs:field xpath='wxr:taxonomy'/>
								<xs:field xpath='wxr:slug'/>
							</xs:unique>
							<xs:keyref name='term_reference' refer='term_slug_unique_within_taxonomy'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that there must be a <wxr:term/> corresponding
										to every term associated with a post.
									</xs:documentation>
									<xs:documentation>
										@todo this keyref constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<item/>. However, given the subset of XPath expressions allowed in
										<xs:selector/> I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./item/category'/>
								<xs:field xpath='@domain'/>
								<xs:field xpath='@wxr:slug'/>
							</xs:keyref>
							<xs:unique name='user_id_unique'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that user IDs must be unique.
									</xs:documentation>
									<xs:documentation>
										@todo this unique constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<wxr:user/>. However, given the subset of XPath expressions allowed in
										<xs:selector/> I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./wxr:user'/>
								<xs:field xpath='wxr:id'/>
							</xs:unique>
							<xs:unique name='user_login_unique'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that user logins must be unique.
									</xs:documentation>
									<xs:documentation>
										@todo this unique constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<wxr:user/>. However, given the subset of XPath expressions allowed in
										<xs:selector/> I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./wxr:user'/>
								<xs:field xpath='wxr:login'/>
							</xs:unique>
							<xs:unique name='user_email_unique'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that user emails must be unique.
									</xs:documentation>
									<xs:documentation>
										@todo this unique constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<wxr:user/>. However, given the subset of XPath expressions allowed in
										<xs:selector/> I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./wxr:user'/>
								<xs:field xpath='wxr:email'/>
							</xs:unique>
							<xs:unique name='post_id_unique'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that post IDs must be unique.
									</xs:documentation>
									<xs:documentation>
										@todo this unique constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<item/>. However, given the subset of XPath expressions allowed in
										<xs:selector/> I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./item'/>
								<xs:field xpath='wxr:id'/>
							</xs:unique>
							<xs:unique name='comment_id_unique'>
								<xs:annotation>
									<xs:documentation>
										Represents the constraint that comment IDs must be unique.
									</xs:documentation>
									<xs:documentation>
										@todo this unique constraint would serve 'documentation' purposes
										better if it could be specified in the definition of
										<wxr:comment/>. However, given the subset of XPath expressions allowed in
										<xs:selector/> I don't think that's possible. Investigate further.
									</xs:documentation>
								</xs:annotation>
								<xs:selector xpath='./item/wxr:comment'/>
								<xs:field xpath='wxr:id'/>
							</xs:unique>
						</xs:element>
					</xs:all>
					<xs:attribute name='version' type='xs:decimal' use='required' fixed='2.0'>
						<xs:annotation>
							<xs:documentation>Represents the version of RSS used.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute ref='wxr:version' use='required'/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:group name='rss_channel_elements'>
		<xs:annotation>
			<xs:documentation>
				This model group consists of elements from the RSS spec at the channel level that
				are output by the exporter.
			</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name='title' type='xs:string'>
				<xs:annotation>
					<xs:documentation>
						Represents the name of the channel.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='link' type='xs:anyURI'>
				<xs:annotation>
					<xs:documentation>
						Represents the URL of the channel.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='description' type='xs:string'>
				<xs:annotation>
					<xs:documentation>
						Represents the description of the channel.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='pubDate' type='rss_date_time'>
				<xs:annotation>
					<xs:documentation>
						Represents the date/time the export was done.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='language' type='xs:language'>
				<xs:annotation>
					<xs:documentation>
						Represents the language used in the channel (i.e., the language used in the site
						which has been exported).
					</xs:documentation>
					<xs:documentation>
						@todo verify that the lexical space of xs:language is the same as the range of bloginfo_rss( 'language' ).
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='generator' minOccurs='0'>
				<xs:annotation>
					<xs:documentation>
						Represents the "filters" used to generate the export. 
					</xs:documentation>
					<xs:documentation>
						@todo open a trac ticket to consider uncoupling the output of this element from
						the 'rss_head' action, and explicitly output it in export.php.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base='xs:anyURI'>
							<xs:attribute ref='wxr:wp_version' use='required'/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name='docs' minOccurs='0'>
				<xs:annotation>
					<xs:documentation>
						Represents a URL that points to the documentation for WXR. 
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base='xs:anyURI'>
						<xs:enumeration value='&WXR_NamespaceURI;'/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:all>
	</xs:group>

	<xs:group name='rss_item_elements'>
		<xs:annotation>
			<xs:documentation>
				This model group consists of those parts of a single WP_Post for which there is a standard
				RSS element.
			</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name='title' type='xs:string'>
				<xs:annotation>
					<xs:documentation>
						Represents the title of the WP_Post.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='link' type='xs:anyURI'>
				<xs:annotation>
					<xs:documentation>
						Represents the permalink of the WP_Post.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref='dc:creator'>
				<xs:annotation>
					<xs:documentation>
						Represents the user_login of WP_User who is the author of the WP_Post.
					</xs:documentation>
					<xs:documentation>
						While this is not defined in the RSS spec, it's use is recommended in the RSS Advisory Board's
						'Best Practices' profile, so we're including it here.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='guid'>
				<xs:annotation>
					<xs:documentation>
						Represents the GUID of the WP_Post.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base='xs:anyURI'>
							<xs:attribute name='isPermaLink'>
								<xs:annotation>
									<xs:documentation>
										Represents whether the GUID is the permalink for the WP_Post.
									</xs:documentation>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base='xs:boolean'>
										<xs:pattern value='false'>
											<xs:annotation>
												<xs:documentation>
													The value of this attribute is hardcoded in export.php to 'false'.
												</xs:documentation>
											</xs:annotation>
										</xs:pattern>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name='description' type='xs:string'>
				<xs:annotation>
					<xs:documentation>
						Represents post_excerpt of the WP_Post.
					</xs:documentation>
					<xs:documentation>
						Note: WXR 1.0, 1.1 and 1.2 use <excerpt:encoded/> to represent the post_excerpt and
						the standard exporter always outputs the empty string for the content of this element.
						The RSS Advisory Board's 'Best Practices' profile says 'Publishers who employ summaries
						should store the summary in description and the full content in content:encoded,
						ordering description first within the item.' as well as 'When a namespace element
						duplicates the functionality of an element defined in RSS, the core element should be used.'
						and the semantics of the post_excerpt exactly matches that of a 'summary' (i.e., this element)
						as defined in RSS.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref='content:encoded'>
				<xs:annotation>
					<xs:documentation>
						While this is not defined in the RSS spec, it's use is recommended in the RSS Advisory Board's
						'Best Practices' profile, so we're including it here.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='category' minOccurs='0' maxOccurs='unbounded'>
				<xs:annotation>
					<xs:documentation>
						Represents a single WP_Term associated with the WP_Post.
					</xs:documentation>
					<xs:documentation>
						Note that this element is from the RSS spec (and hence, is in the empty namespace) and
						is NOT to be confused with <wp:category/> from WXR 1.0, 1.1 and 1.2.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base='xs:string'>
							<xs:attribute name='domain' type='xs:string' use='required'>
								<xs:annotation>
									<xs:documentation>
										Represents the taxonomy of a WP_Term.  The content of this element is the
										name of the WP_Term.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute ref='wxr:slug' use='required'>
								<xs:annotation>
									<xs:documentation>
										Represents the taxonomy of a WP_Term.  The content of this element is the
										name of the WP_Term.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
		</xs:all>
	</xs:group>
</xs:schema>
